#######################
# DINING PHILOSOPHERS #
#######################

This canvas contains the following files:
a. README
b. makefile
c. include/philosophers.h
d. src/dp_simulator.c
e. src/philosophers-no-concurrency.c
f. src/philosophers-bad.c
g. src/philosophers.c

(a) is the file you're reading right now.
It contains explanations about how to work with this canvas.

(b) is the file that regroups all of your compilation/run commands.
        NB_PHILS    => sets the number of philosophers in the simulation
        NB_MEALS    => sets the number of meals per philosopher in the simulation
        build   => compiles your solution
        run     => runs your solution
                    You can terminate the execution of your program at any point with ctrl-C
                    ctrl-C will kill all running processes, and trigger the cleanup function
        clean   => deletes all the temporary files, including the log of the last execution
        demos   => compiles two

(c) and (d) provide the backbone of the simulation.
(c) declares the constants, structures, and functions to build a simulation.
Set the number of philosophers and the number of meals by modifying NPHIL and MEALS.
(d) implements the simulator.

(e) and (f) show bad examples of how to code a synchronization among philosophers.
(e) forces philosophers to eat one at a time.
(f) does something uncool that you have to explain below.
NOTE: the default number of meals and philosophers for these examples is different; you can change these values in philosophers.h

(g) is the canvas for your solution.


#######################
#       ANSWER        #
#######################
Write your explanation about what may happen when all philosophers are hungry simultaneously, and each of them picks up the chopstick to their left before picking up the chopstick to the right.

Deadlock will happen becasue in a situation: For each philosopher, if he picks up the chopstick on his left, a context switch will happen and another philosopher will do the same. When all of them have picked the chopstick on their left, none of them can pick up the chopstick to their right.

#######################
#      SOLUTION       #
#######################
Write a detailed explanation of your solution to the dining philosophers problem.

My solution is simple: since there are N philosophers around the table, the maximum number of philosophers who can start picking up a chopstick is N - 1, otherwise it will cause a deadlock like the bad solution. Therefore, I can use a semaphore initialized with value N - 1, to ensure that only N - 1 philosophers at a time, can choose to pick up a chopstick. Whenever a philosopher picks up both chopsticks, I know he is going to eat and put down the chopsticks later. So the time when it picks up both chopsticks, we can allow another philosopher trying to pick up the chopsticks. 